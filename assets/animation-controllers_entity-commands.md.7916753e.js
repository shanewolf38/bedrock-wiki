import{_ as o,c as p,a,w as t,e as n,r,o as c,d as e}from"./404.md.aecdc040.js";const j='{"title":"Entity Commands","description":"","frontmatter":{"title":"Entity Commands","nav_order":2,"tags":["intermediate"]},"headers":[{"level":2,"title":"Animation Controllers","slug":"animation-controllers"},{"level":2,"title":"Using Animation Controllers","slug":"using-animation-controllers"},{"level":2,"title":"Triggering Commands using Events:","slug":"triggering-commands-using-events"},{"level":2,"title":"Setting Component Groups","slug":"setting-component-groups"},{"level":2,"title":"Adding Events","slug":"adding-events"},{"level":2,"title":"Triggering Events","slug":"triggering-events"},{"level":3,"title":"Interact Component:","slug":"interact-component"},{"level":3,"title":"Timer","slug":"timer"},{"level":2,"title":"Review:","slug":"review"}],"relativePath":"animation-controllers/entity-commands.md"}',l={},i=n('<div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>A much easier method of running entity commands is through the <code>run_command</code> event response. However, this is currently experimental.</p></div><h2 id="animation-controllers" tabindex="-1">Animation Controllers <a class="header-anchor" href="#animation-controllers" aria-hidden="true">#</a></h2><p>To trigger slash commands, we are going to use Behavior Pack animation controllers. Animation controllers should be placed like: <code>animation_controllers/some_controller.json</code>. You can <a href="https://bedrock.dev/docs/stable/Entity%20Events" target="_blank" rel="noopener noreferrer">learn more about animation controllers on the entity events section of bedrock.dev</a>.</p><p>In short, animation controllers allow us to trigger events from behavior packs.</p><ul><li>Slash commands (like <code>/say</code>)</li><li>Molang ( <code>variable.foo += 1;</code> )</li><li>Entity Events (such as <code>@s wiki:my_event</code>)</li></ul><p>Here is an example animation controller:</p>',6),u=e("BP/animation_controllers/entity_commands.ac.json"),m=n(`<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">{</span>
	<span class="token property">&quot;format_version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.10.0&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;animation_controllers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;controller.animation.sirlich_entity_commands&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;states&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token property">&quot;transitions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
						<span class="token punctuation">{</span>
							<span class="token property">&quot;on_summon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span> <span class="token comment">//1 evaluates as true</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">]</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token property">&quot;on_summon&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token property">&quot;on_entry&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/say I have been summoned&quot;</span><span class="token punctuation">]</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>This animation controller will run the command <code>/say I have been summoned</code> as soon as the entity is summoned into the world. If you are confused about how this works, please review Molang, Animations, and Entity Events.</p><p>In short, there are <code>states</code>, which can trigger events in their <code>on_entry</code> clause. We use queries to move between different states. By default, entities will be inside of the <code>default</code> state, unless an <code>initial_state</code> value has been defined.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Queries are re-run when the world/chunk reloads. This means the line <code>&quot;/say I have been summoned&quot;</code> will actually run each time the entity &quot;loads&quot; - not only when it is summoned.</p></div><p>If you need to stop this from happening, you need to add additional queries, such as a <code>skin_id</code> query. The first time the entity spawns, check for <code>skin_id = 0</code>, and then <em>also</em> add some higher <code>skin_id</code>, such as <code>skin_id = 1</code>. Then, when the entity reloads, it won&#39;t be able to run those commands. This is shown further down in the document.</p><h2 id="using-animation-controllers" tabindex="-1">Using Animation Controllers <a class="header-anchor" href="#using-animation-controllers" aria-hidden="true">#</a></h2><p>To add this animation controller to our entity, we can use the following code in the entity definition description:</p>`,7),d=e("BP/entities/entity_commands.se.json"),k=n(`<div class="language-json line-numbers-mode"><pre><code><span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;identifier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wiki:entity_commands&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;animate&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">&quot;wiki:entity_commands&quot;</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;animations&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;wiki:entity_commands&quot;</span><span class="token operator">:</span> <span class="token string">&quot;controller.animation.wiki_entity_commands&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Once again, if you are confused about any of this step, please review the <a href="https://bedrock.dev/r/Entity%20Events" target="_blank" rel="noopener noreferrer">Entity Events documentation</a>.</p><h2 id="triggering-commands-using-events" tabindex="-1">Triggering Commands using Events: <a class="header-anchor" href="#triggering-commands-using-events" aria-hidden="true">#</a></h2><p>Animation transitions are created using queries. You can read about queries <a href="https://bedrock.dev/docs/stable/MoLang#List%20of%20Entity%20Queries" target="_blank" rel="noopener noreferrer">here</a>. In our first example, our query was simply <code>true</code>, which means the commands run automatically. We can use more complicated queries to create more interesting effect. A really convenient method is using components as Molang filters to trigger the commands.</p><p>I personally like using <a href="https://docs.microsoft.com/en-us/minecraft/creator/reference/content/entityreference/examples/entityproperties/minecraftproperty_skin_id" target="_blank" rel="noopener noreferrer">skin_id</a>.</p><p>We can update our animation controller to trigger based on <code>skin_id</code>:</p>`,6),b=e("BP/animation_controllers/entity_commands.ac.json"),_=n(`<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">{</span>
	<span class="token property">&quot;format_version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.10.0&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;animation_controllers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;controller.animation.sirlich_entity_commands&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;states&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token property">&quot;transitions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
						<span class="token punctuation">{</span>
							<span class="token property">&quot;command_example&quot;</span><span class="token operator">:</span> <span class="token string">&quot;query.skin_id == 1&quot;</span>
						<span class="token punctuation">}</span><span class="token punctuation">,</span>
						<span class="token punctuation">{</span>
							<span class="token property">&quot;zombies&quot;</span><span class="token operator">:</span> <span class="token string">&quot;query.skin_id == 2&quot;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">]</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token property">&quot;command_example&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token property">&quot;transitions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
						<span class="token punctuation">{</span>
							<span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;query.skin_id != 1&quot;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">]</span><span class="token punctuation">,</span>
					<span class="token property">&quot;on_entry&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/say Command One!&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;@s execute_no_commands&quot;</span><span class="token punctuation">]</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token property">&quot;zombies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token property">&quot;transitions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
						<span class="token punctuation">{</span>
							<span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;query.skin_id != 2&quot;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">]</span><span class="token punctuation">,</span>
					<span class="token property">&quot;on_entry&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
						<span class="token string">&quot;/say AHH! Zombies everywhere!&quot;</span><span class="token punctuation">,</span>
						<span class="token string">&quot;/summon minecraft:zombie&quot;</span><span class="token punctuation">,</span>
						<span class="token string">&quot;/summon minecraft:zombie&quot;</span><span class="token punctuation">,</span>
						<span class="token string">&quot;/summon minecraft:zombie&quot;</span><span class="token punctuation">,</span>
						<span class="token string">&quot;/summon minecraft:zombie&quot;</span><span class="token punctuation">,</span>
						<span class="token string">&quot;@s execute_no_commands&quot;</span>
					<span class="token punctuation">]</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>This animation controller has two command states now: The first is triggered by <code>skin_id = 1</code>, and the second by <code>skin_id = 2</code>. Notice that <code>==</code> and <code>!=</code> was used. <code>==</code> tests for equality, do NOT use a single <code>=</code>. <code>!</code> means NOT, so <code>!=</code> tests to make sure it is NOT equal to a specific value. Additionally, note how I&#39;ve added the <code>@s execute_no_commands</code> syntax at the end of each command list. We will create <code>execute_no_commands</code> later. It will allow us to set the skin_id back to 0, and re-use our commands.</p><p>The syntax is <code>@s</code> followed by the name of an entity event. This allows us to add/remove components from within the animation controller.</p><h2 id="setting-component-groups" tabindex="-1">Setting Component Groups <a class="header-anchor" href="#setting-component-groups" aria-hidden="true">#</a></h2><p>Back in our entity file, we can set the <code>skin_id</code> using the <code>skin_id</code> component.</p><p>The <code>skin_id</code> component looks like this:</p>`,6),q=n(`<div class="language-json line-numbers-mode"><pre><code><span class="token property">&quot;minecraft:skin_id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>We can add component groups that contains skin_ids:</p>`,2),h=e("BP/entities/entity_commands.se.json"),g=n(`<div class="language-json line-numbers-mode"><pre><code><span class="token property">&quot;component_groups&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;execute_no_commands&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;minecraft:skin_id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;command_example&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;minecraft:skin_id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;command_zombies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;minecraft:skin_id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">2</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="adding-events" tabindex="-1">Adding Events <a class="header-anchor" href="#adding-events" aria-hidden="true">#</a></h2><p>Now let&#39;s create events so we can easily add these groups:</p>`,3),y=e("BP/entities/entity_commands.se.json"),v=n(`<div class="language-json line-numbers-mode"><pre><code><span class="token property">&quot;events&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;minecraft:entity_spawned&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;add&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;component_groups&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;execute_no_commands&quot;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;execute_no_commands&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;add&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;component_groups&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;execute_no_commands&quot;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;command_example&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;add&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;component_groups&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;command_example&quot;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;command_zombies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;add&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;component_groups&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;command_zombies&quot;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="triggering-events" tabindex="-1">Triggering Events <a class="header-anchor" href="#triggering-events" aria-hidden="true">#</a></h2><p>There are loads of ways to trigger events in Minecraft. As stated earlier, you can use animation controllers to trigger events. Additionally, let&#39;s look at two specific examples:</p><h3 id="interact-component" tabindex="-1">Interact Component: <a class="header-anchor" href="#interact-component" aria-hidden="true">#</a></h3><p>This component will spawn zombies whenever you click on him.</p>`,5),f=e("BP/entities/entity_commands.se.json"),T=n(`<div class="language-json line-numbers-mode"><pre><code><span class="token property">&quot;minecraft:interact&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;interactions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token property">&quot;on_interact&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;filters&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;all_of&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                        <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;is_family&quot;</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;subject&quot;</span><span class="token operator">:</span> <span class="token string">&quot;other&quot;</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;player&quot;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;event&quot;</span><span class="token operator">:</span> <span class="token string">&quot;command_zombies&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="timer" tabindex="-1">Timer <a class="header-anchor" href="#timer" aria-hidden="true">#</a></h3><p>This component will trigger the example command every 10 seconds:</p>`,3),w=e("BP/entities/entity_commands.se.json"),A=n(`<div class="language-json line-numbers-mode"><pre><code><span class="token property">&quot;minecraft:timer&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;looping&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token property">&quot;time_down_event&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;event&quot;</span><span class="token operator">:</span> <span class="token string">&quot;example_command&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>By adding these (and similar!) components to our entity, we can control when the <code>skin_id</code> changes, and therefor which events run.</p><h2 id="review" tabindex="-1">Review: <a class="header-anchor" href="#review" aria-hidden="true">#</a></h2><p>Here is how it all works:</p><ul><li>Run <code>example_command</code> using a component like interact or timer.</li><li>This adds the <code>example_command</code> component group</li><li>This adds the <code>skin_id</code> component</li><li>This sets the entities <code>skin_id</code>, which can be queried in the animation controller</li><li>The animation controller notices this <code>skin_id</code>, and moves to the <code>example_command</code> state</li><li>The animation controller runs the <code>/say</code> command</li><li>The animation controller runs the entity event <code>@s execute_no_command</code></li><li><code>execute_no_command</code> event sets the <code>skin_id</code> to 0</li><li>The animation controllers sees this, and transitions to the default state</li><li>Now the animation controller waits for a new <code>skin_id</code></li></ul>`,5);function x(C,I,S,E,P,N){const s=r("CodeHeader");return c(),p("div",null,[i,a(s,null,{default:t(()=>[u]),_:1}),m,a(s,null,{default:t(()=>[d]),_:1}),k,a(s,null,{default:t(()=>[b]),_:1}),_,a(s),q,a(s,null,{default:t(()=>[h]),_:1}),g,a(s,null,{default:t(()=>[y]),_:1}),v,a(s,null,{default:t(()=>[f]),_:1}),T,a(s,null,{default:t(()=>[w]),_:1}),A])}var R=o(l,[["render",x]]);export{j as __pageData,R as default};
