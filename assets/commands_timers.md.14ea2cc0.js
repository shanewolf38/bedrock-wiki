import{_ as o,c,a as e,w as n,e as t,r as i,o as d,d as s}from"./404.md.7c1902da.js";var u="/assets/images/commands/timers/timer.gif";const E='{"title":"Command Timers","description":"","frontmatter":{"title":"Command Timers","category":"General","tags":["experimental"],"mention":["Hatchibombotar"]},"headers":[{"level":2,"title":"Introduction","slug":"introduction"},{"level":2,"title":"How to make them","slug":"how-to-make-them"},{"level":3,"title":"Start timer","slug":"start-timer"},{"level":3,"title":"Counting Down","slug":"counting-down"},{"level":3,"title":"Running commands when the timer is over","slug":"running-commands-when-the-timer-is-over"},{"level":3,"title":"Running commands when the timer is running","slug":"running-commands-when-the-timer-is-running"},{"level":2,"title":"End result","slug":"end-result"}],"relativePath":"commands/timers.md"}',l={},m=t('<div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This document covers experimental features, for 1.19.10+ mcfunctions.</p></div><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p>When creating mechanics or waiting for a set amount of time, it can be useful to create timers using only mcfunction files.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This page is for using commands to create timers, for entity timers, look at <a href="/entities/timers.html">this page</a></p></div><h2 id="how-to-make-them" tabindex="-1">How to make them <a class="header-anchor" href="#how-to-make-them" aria-hidden="true">#</a></h2><h3 id="start-timer" tabindex="-1">Start timer <a class="header-anchor" href="#start-timer" aria-hidden="true">#</a></h3>',6),_=s("BP/functions/timer_start.mcfunction"),h=t(`<div class="language-"><pre><code>scoreboard objectives add timer dummy
scoreboard players add value timer 100
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>To start your timer, you need to create the scoreboard, and set the value that you are going to count down from.</p><p>The time left on the timer (currently set here as 100) should be in ticks.</p><p>20 ticks = 1 second (5s * 20 = 100)</p><h3 id="counting-down" tabindex="-1">Counting Down <a class="header-anchor" href="#counting-down" aria-hidden="true">#</a></h3>`,5),p=s("BP/functions/timer_tick.mcfunction"),v=t(`<div class="language-"><pre><code>scoreboard players remove value timer 1
execute if score value timer matches 0.. run function timer_events
execute if score value timer matches -1 run scoreboard objectives remove timer
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Each tick, you want the timer to go down by 1. And, as long as the timer is above 0, you run the timer events. Once the timer gets to -1, remove the scoreboard</p>`,2),g=s("BP/functions/tick.json"),b=t(`<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">{</span>
    <span class="token property">&quot;values&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;timer_tick&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>In order to get the <code>timer_tick</code> function to run every tick, you need to include it in your <code>tick.json</code> file.</p><h3 id="running-commands-when-the-timer-is-over" tabindex="-1">Running commands when the timer is over <a class="header-anchor" href="#running-commands-when-the-timer-is-over" aria-hidden="true">#</a></h3>`,3),f=s("BP/functions/timer_events.mcfunction"),T=t(`<div class="language-"><pre><code>execute if score value timer matches 0 run function timer_up
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>Inside your <code>timer_events</code> file, you want to run a command once the timer reaches 0. The <code>timer_up</code> function include the commands you want to run once it has finished.</p><h3 id="running-commands-when-the-timer-is-running" tabindex="-1">Running commands when the timer is running <a class="header-anchor" href="#running-commands-when-the-timer-is-running" aria-hidden="true">#</a></h3><p>You could also run commands while the timer is running:</p>`,4),w=s("BP/functions/timer_events.mcfunction"),k=t(`<div class="language-"><pre><code>execute if score value timer matches 50 run say Half Way!
execute if score value timer matches 0 run say Finished!
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="end-result" tabindex="-1">End result <a class="header-anchor" href="#end-result" aria-hidden="true">#</a></h2><p><img src="`+u+'" alt=""></p><p>You can also view an example timer pack here:</p>',4),y=s("Download Example Pack");function S(x,A,C,P,I,V){const a=i("CodeHeader"),r=i("BButton");return d(),c("div",null,[m,e(a,null,{default:n(()=>[_]),_:1}),h,e(a,null,{default:n(()=>[p]),_:1}),v,e(a,null,{default:n(()=>[g]),_:1}),b,e(a,null,{default:n(()=>[f]),_:1}),T,e(a,null,{default:n(()=>[w]),_:1}),k,e(r,{link:"https://github.com/Bedrock-OSS/wiki-addon/releases/download/download/mcfunction_timers.mcpack",color:"gray"},{default:n(()=>[y]),_:1})])}var N=o(l,[["render",S]]);export{E as __pageData,N as default};
